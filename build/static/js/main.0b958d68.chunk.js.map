{"version":3,"sources":["TaskScheduler.js","App.js","serviceWorker.js","index.js"],"names":["Countdown","Statistic","EditableContext","React","createContext","EditableRow","index","props","Form","useForm","form","component","Provider","value","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","useState","editing","setEditing","inputRef","useRef","useContext","useEffect","current","focus","toggleEdit","setFieldsValue","save","e","a","validateFields","values","console","log","childNode","Item","style","margin","name","rules","required","message","ref","onPressEnter","onBlur","className","paddingRight","onClick","EditableTable","handleDelete","key","state","count","counter","type","notification","description","dataSource","setState","filter","item","Serverdeletedfromdashboard","handleAdd","currentDate","moment","format","newData","date","Date","now","Addanewservertodashboard","row","findIndex","splice","handleChangeTask","tasks","dataSources","numberofrows","map","i","push","setTimeout","columns","width","render","text","length","onConfirm","timeleftpertask","this","components","body","cell","col","onCell","marginTop","marginBottom","marginRight","marginLeft","min","defaultValue","onChange","rowClassName","bordered","Component","App","ghost","onBack","window","location","reload","subTitle","extra","size","column","label","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0b958d68.chunk.js","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport {\n  Table,\n  Input,\n  Button,\n  Popconfirm,\n  Form,\n  notification,\n  InputNumber,\n  Statistic\n} from \"antd\";\nimport moment from \"moment\";\n\nconst { Countdown } = Statistic;\nvar timeconst = 0;\n\nconst Addanewservertodashboard = type => {\n  notification[type]({\n    message: \"New Server Added\",\n    description: \"A new server is added to the Dashboard.\"\n  });\n};\n\nconst NotificationServerLimit = type => {\n  notification[type]({\n    message: \"Server Limit Reached to 10\",\n    description:\n      \"You can deploy a maximum of 10 servers more than that can not be deployed, Please delete an old server to add a new one.\"\n  });\n};\n\nconst Serverdeletedfromdashboard = type => {\n  notification[type]({\n    message: \"An old server is deleted.\",\n    description:\n      \"A server is deleted from the dashboard, Please be careful while doing this operation.\"\n  });\n};\n\nconst NoMandatoryServerDelete = type => {\n  notification[type]({\n    message: \"Cannot Delete Mandatory Server\",\n    description:\n      \"You are trying to delete a manadatory server, atleast one server should be always available in Dashboard.\"\n  });\n};\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef();\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    });\n  };\n\n  const save = async e => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      console.log(\"Save failed:\", errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{\n          margin: 0\n        }}\n        name={dataIndex}\n        rules={[\n          {\n            required: true,\n            message: `${title} is required.`\n          }\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{\n          paddingRight: 24\n        }}\n        onClick={toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  return <td {...restProps}>{childNode}</td>;\n};\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = [\n      {\n        title: \"name\",\n        dataIndex: \"name\",\n        width: \"30%\",\n        editable: true\n      },\n      {\n        title: \"date\",\n        dataIndex: \"date\"\n      },\n      {\n        title: \"Time left per task\",\n        dataIndex: \"description\"\n      },\n      {\n        title: \"operation\",\n        dataIndex: \"operation\",\n        render: (text, record) =>\n          this.state.dataSource.length >= 1 ? (\n            <Popconfirm\n              title=\"Sure to delete?\"\n              onConfirm={() => this.handleDelete(record.key)}\n            >\n              <a>Remove a server</a>\n            </Popconfirm>\n          ) : null\n      }\n    ];\n    this.state = {\n      dataSource: [\n        {\n          key: \"0\",\n          name: \"Default Server\",\n          date: \"29/09/2020\",\n          description: (\n            <Countdown\n              value={Date.now() + 1000 * timeconst}\n              format=\"HH:mm:ss:SSS\"\n            />\n          )\n        }\n      ],\n      count: 1,\n      counter: 0,\n      tasks: 0,\n      timeleftpertask: 0\n    };\n  }\n\n  handleDelete = key => {\n    console.log(this.state.count, this.state.counter);\n    if (this.state.count - this.state.counter <= 1) {\n      console.log(\"Can't delete this mandatory server\");\n      NoMandatoryServerDelete(\"error\");\n    } else {\n      const dataSource = [...this.state.dataSource];\n      this.setState({\n        dataSource: dataSource.filter(item => item.key !== key),\n        counter: this.state.counter + 1\n      });\n      Serverdeletedfromdashboard(\"info\");\n      console.log(\"An old server is deleted.\");\n    }\n  };\n  handleAdd = () => {\n    if (this.state.count - this.state.counter > 9) {\n      console.log(\"can't add more than 10 rows.\");\n      NotificationServerLimit(\"warning\");\n    } else {\n      const { count, dataSource } = this.state;\n      var currentDate = moment().format(\"DD/MM/YYYY\");\n      const newData = {\n        key: count,\n        name: `New Server ${count}`,\n        date: currentDate,\n        description: (\n          <Countdown\n            value={Date.now() + 1000 * timeconst}\n            format=\"HH:mm:ss:SSS\"\n          />\n        )\n      };\n      this.setState({\n        dataSource: [...dataSource, newData],\n        count: count + 1\n      });\n      Addanewservertodashboard(\"success\");\n      console.log(\"A new server is added to the Dashboard.\");\n    }\n  };\n  handleSave = row => {\n    const newData = [...this.state.dataSource];\n    const index = newData.findIndex(item => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, { ...item, ...row });\n    this.setState({\n      dataSource: newData\n    });\n  };\n\n  handleChangeTask = value => {\n    this.setState({ tasks: value });\n    console.log(\"tasks changed\", value);\n    var dataSources = [];\n    var numberofrows = this.state.count - this.state.counter;\n    console.log(numberofrows, \"number of rows\");\n    if (numberofrows >= value) {\n      this.state.dataSource.map((a, i) =>\n        dataSources.push({\n          key: a.key,\n          name: a.name,\n          date: a.date,\n          description:\n            i < value ? (\n              <Countdown value={Date.now() + 1000 * 10} format=\"HH:mm:ss:SSS\" />\n            ) : (\n              <Countdown\n                value={Date.now() + 1000 * timeconst}\n                format=\"HH:mm:ss:SSS\"\n              />\n            )\n        })\n      );\n      this.setState({ dataSource: dataSources });\n    } else {\n      setTimeout(() => {\n        this.state.dataSource.map((a, i) =>\n          dataSources.push({\n            key: a.key,\n            name: a.name,\n            date: a.date,\n            description:\n              i < value ? (\n                <Countdown\n                  value={Date.now() + 1000 * 10}\n                  format=\"HH:mm:ss:SSS\"\n                />\n              ) : (\n                <Countdown\n                  value={Date.now() + 1000 * timeconst}\n                  format=\"HH:mm:ss:SSS\"\n                />\n              )\n          })\n        );\n        this.setState({ dataSource: dataSources });\n      }, 10500);\n    }\n  };\n\n  render() {\n    const { dataSource } = this.state;\n    const components = {\n      body: {\n        row: EditableRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      };\n    });\n    return (\n      <div>\n        <Button onClick={this.handleAdd} type=\"primary\">\n          Add a server, Total upto 10.\n        </Button>\n        <InputNumber\n          style={{\n            marginTop: \"1%\",\n            marginBottom: \"1%\",\n            marginRight: \"1%\",\n            marginLeft: \"1%\"\n          }}\n          min={0}\n          defaultValue={0}\n          onChange={this.handleChangeTask}\n        />\n        Add Tasks Here\n        <Countdown\n          title=\"Total time needed to complete all tasks if single server is used, this will update everytime whenever a new server is added or task is updated because it calculates constant time i.e number of tasks * 10\"\n          value={Date.now() + 1000 * 10 * this.state.tasks}\n          format=\"HH:mm:ss:SSS\"\n        />\n        <Table\n          components={components}\n          rowClassName={() => \"editable-row\"}\n          bordered\n          dataSource={dataSource}\n          columns={columns}\n        />\n      </div>\n    );\n  }\n}\n\nexport default EditableTable;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { PageHeader, Button, Descriptions } from \"antd\";\nimport EditableTable from \"./TaskScheduler\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div>\n        {\" \"}\n        <div className=\"site-page-header-ghost-wrapper\">\n          <PageHeader\n            ghost={false}\n            onBack={() => window.location.reload()}\n            title=\"DASHBOARD TO SCHEDULER\"\n            subTitle=\"We can monitor jobs here\"\n            extra={[\n              <Button\n                key=\"2\"\n                type=\"primary\"\n                onClick={() => window.location.reload()}\n              >\n                Home\n              </Button>\n            ]}\n          >\n            <Descriptions size=\"small\" column={3}>\n              <Descriptions.Item label=\"Created\">\n                Saurabh Kumar\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Association\">\n                <a>Sample Project</a>\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Creation Time\">\n                29th September 2020\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Effective Time\">\n                29th September 2020\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Remarks\">\n                This DASHBOARD will monitor all the server task and\n                <br /> time remaining time for all tasks.\n              </Descriptions.Item>\n            </Descriptions>\n          </PageHeader>\n          <div style={{ marginLeft: \"2%\" }}>\n            <EditableTable />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}